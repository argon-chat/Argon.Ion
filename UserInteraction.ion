

service UserInteraction() {
    GetMe(): ArgonUser;
    CreateSpace(request: CreateServerRequest): CreateSpaceResult;
    GetSpaces(): ArgonSpaceBase[];

    UpdateMe(request: UserEditInput): ArgonUser;

    JoinToSpace(inviteCode: InviteCode): JoinToSpaceResult;

    BroadcastPresence(presence: UserActivityPresence);

    RemoveBroadcastPresence();


    GetMyFeatures(): FeatureFlag[]; 

    GetMyProfile(): ArgonUserProfile;


    BeginUploadAvatar(): UploadFileResult;
    CompleteUploadAvatar(blobId: guid);

    BeginUploadProfileHeader(): UploadFileResult;
    CompleteUploadProfileHeader(blobId: guid);
}

enum UploadFileError {
    NONE,
    NOT_AUTHORIZED,
    INTERNAL_ERROR
}

union UploadFileResult {
    SuccessUploadFile(blobId: guid),
    FailedUploadFile(error: UploadFileError)
}

union CreateSpaceResult {
    SuccessCreateSpace(space: ArgonSpaceBase),
    FailedCreateSpace(error: CreateSpaceError)
}

enum CreateSpaceError {
    UNKNOWN,
    LIMIT_REACHED
}

msg UserEditInput {
    displayName: string?;
    avatarId: string?;
}

msg FeatureFlag {
    key: string;
    enabled: bool;
    variant: string?;
    parameters: FeatureFlagParameter[];
}

msg FeatureFlagParameter {
    key: string;
    value: string;
}

msg CreateServerRequest {
    name: string;
    description: string;
    avatarFieldId: string;
}

msg UserCredentialsInput {
    email: string?;
    phone: string?;
    username: string?;
    password: string?;
    otpCode: string?;
    captchaToken: string?;
}

msg UserLoginInput {
    email: string?;
    phone: string?;
    username: string?;
}

msg NewUserCredentialsInput {
    email: string;
    username: string;
    password: string;
    displayName: string;
    argreeTos: bool;
    birthDate: dateonly;
    argreeOptionalEmails: bool;
    captchaToken: string?;
}

union AuthorizeResult {
    SuccessAuthorize(token: string, refreshToken: string?),
    FailedAuthorize(error: AuthorizationError)
}

union RegistrationResult {
    SuccessRegistration(token: string, refreshToken: string?),
    FailedRegistration(error: RegistrationError, field: string?, message: string?)
}

union JoinToSpaceResult {
    SuccessJoin(space: ArgonSpace),
    FailedJoin(error: AcceptInviteError)
}

enum AcceptInviteError
{
    NONE,
    NOT_FOUND,
    EXPIRED,
    YOU_ARE_BANNED
}


enum AuthorizationError
{
    NONE,
    BAD_CREDENTIALS,
    REQUIRED_OTP,
    BAD_OTP
}

enum RegistrationError
{
    USERNAME_ALREADY_TAKEN,
    USERNAME_RESERVED,
    EMAIL_ALREADY_REGISTERED,
    REGION_BANNED,
    EMAIL_BANNED,
    SSO_EMAILS_NOT_ALLOWED,
    INTERNAL_ERROR,
    VALIDATION_FAILED
}

enum LockdownReason
{
    NONE,
    SPAM_SCAM_ACCOUNT,
    INCITING_MOMENT,
    NON_BINARY_PERSON,
    TOS_VIOLATION,
    LGBT_AGITATION,
    DRUG_VIOLATION,
    TERRORISM_AGITATION,
    CHILD_ABUSE
}