enum ChannelType: u2
{
    Text,
    Voice,
    Announcement
}

enum JoinToChannelError: u2 {
    NONE,
    CHANNEL_IS_NOT_VOICE
}

msg CreateChannelRequest {
    spaceId: guid;
    name: string;
    kind: ChannelType;
    desc: string;
}

msg RealtimeChannel {
    channel: ArgonChannel;
    users: RealtimeChannelUser[];
}

msg ArgonChannel {
    type: ChannelType;
    spaceId: guid;
    channelId: guid;
    name: string;
    description: string?;
    categoryId: guid;
}

flags ChannelMemberState
{
    NONE                       = 0,
    MUTED                      = 1 << 1,
    MUTED_BY_SERVER            = 1 << 2,
    MUTED_HEADPHONES           = 1 << 3,
    MUTED_HEADPHONES_BY_SERVER = 1 << 4,
    STREAMING                  = 1 << 5
}

union MessageEntity(type: EntityType, offset: i4, length: i4, version: i4) {
    MessageEntityMention(userId: guid),
    MessageEntityEmail(email: string),
    MessageEntityHashTag(hashtag: string),
    MessageEntityQuote(quotedUserId: guid),
    MessageEntityUnderline(colour: i4),
    MessageEntityUrl(domain: string, path: string)
}

enum EntityType : u2
{
    Hashtag,
    Mention,
    Email,
    Url,
    Monospace,
    Quote,
    Spoiler,
    Strikethrough,
    Bold,
    Italic,
    Underline,
    Fraction,
    Ordinal,
    Capitalized
}

msg ArgonMessage {
    messageId: u8;
    replyId: u8?;
    channelId: guid;
    spaceId: guid;
    text: string;
    entities: MessageEntity[];
    timeSent: datetime;
    sender: guid;
}

msg RealtimeChannelUser {
    userId: guid;
    state: ChannelMemberState;
}

service ChannelInteraction(spaceId: guid, channelId: guid) {
    CreateChannel(request: CreateChannelRequest): void;
    DeleteChannel();
    GetChannels(): RealtimeChannel[];

    
    QueryMessages(from: u8?, limit: i4): ArgonMessage[];
    SendMessage(text: string, entities: MessageEntity[], replyTo: u8?): u8;


    @deprecated()
    GetMessages(count: i4, offset: u8): ArgonMessage[];


    DisconnectFromVoiceChannel();

    Interlink(): InterlinkResult;

    KickMemberFromChannel(memberId: guid): bool;
}


service EventBus() {
    stream ForServer(spaceId: guid): ArgonEvent;

    Dispatch(ev: ArgonClientEvent): void;


    stream Pipe(stream ev: ArgonClientEvent): ArgonEvent;
}

union InterlinkResult() {
    SuccessJoinVoice(rtc: RtcEndpoint, token: string),
    FailedJoinVoice(error: JoinToChannelError)
}

union ArgonEvent(spaceId: guid) {
    ArchetypeChanged(data: Archetype),
    ArchetypeCreated(data: Archetype),
    ChannelCreated(data: ArgonChannel),
    ChannelModified(channelId: guid, bag: string[]),
    ChannelRemoved(channelId: guid),
    UserTypingEvent(channelId: guid, userId: guid),
    UserStopTypingEvent(channelId: guid, userId: guid),
    JoinedToChannelUser(channelId: guid, userId: guid),
    JoinToServerUser(userId: guid),
    LeavedFromChannelUser(channelId: guid, userId: guid),
    UserUpdated(dto: ArgonUser),
    OnUserPresenceActivityChanged(userId: guid, presence: UserActivityPresence),
    OnUserPresenceActivityRemoved(userId: guid),
    UserChangedStatus(userId: guid, status: UserStatus, bag: string[]),
    MessageSent(message: ArgonMessage),
    ServerModified(bag: string[])
}

union ArgonClientEvent() {
    IAmTypingEvent(channelId: guid),
    IAmStopTypingEvent(channelId: guid),
    HeartBeatEvent(status: UserStatus),
    SubscribeToMySpaces()
}

msg UserActivityPresence
{
    kind: ActivityPresenceKind;
    startTimestampSeconds: u8;
    titleName: string;
}

enum ActivityPresenceKind
{
    GAME,
    SOFTWARE,
    STREAMING,
    LISTEN
}

